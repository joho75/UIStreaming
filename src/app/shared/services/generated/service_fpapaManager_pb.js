// source: src/app/protos/service_fpapaManager.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.FPAPManager.Aircraft', null, global);
goog.exportSymbol('proto.FPAPManager.Equipment', null, global);
goog.exportSymbol('proto.FPAPManager.Flight', null, global);
goog.exportSymbol('proto.FPAPManager.FlightListData', null, global);
goog.exportSymbol('proto.FPAPManager.FpapaManagerRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FPAPManager.FpapaManagerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FPAPManager.FpapaManagerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FPAPManager.FpapaManagerRequest.displayName = 'proto.FPAPManager.FpapaManagerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FPAPManager.FlightListData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FPAPManager.FlightListData.repeatedFields_, null);
};
goog.inherits(proto.FPAPManager.FlightListData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FPAPManager.FlightListData.displayName = 'proto.FPAPManager.FlightListData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FPAPManager.Flight = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FPAPManager.Flight, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FPAPManager.Flight.displayName = 'proto.FPAPManager.Flight';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FPAPManager.Aircraft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FPAPManager.Aircraft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FPAPManager.Aircraft.displayName = 'proto.FPAPManager.Aircraft';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FPAPManager.Equipment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FPAPManager.Equipment.repeatedFields_, null);
};
goog.inherits(proto.FPAPManager.Equipment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.FPAPManager.Equipment.displayName = 'proto.FPAPManager.Equipment';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FPAPManager.FpapaManagerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FPAPManager.FpapaManagerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FPAPManager.FpapaManagerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.FpapaManagerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FPAPManager.FpapaManagerRequest}
 */
proto.FPAPManager.FpapaManagerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FPAPManager.FpapaManagerRequest;
  return proto.FPAPManager.FpapaManagerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FPAPManager.FpapaManagerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FPAPManager.FpapaManagerRequest}
 */
proto.FPAPManager.FpapaManagerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FPAPManager.FpapaManagerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FPAPManager.FpapaManagerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FPAPManager.FpapaManagerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.FpapaManagerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FPAPManager.FlightListData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FPAPManager.FlightListData.prototype.toObject = function(opt_includeInstance) {
  return proto.FPAPManager.FlightListData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FPAPManager.FlightListData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.FlightListData.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightsList: jspb.Message.toObjectList(msg.getFlightsList(),
    proto.FPAPManager.Flight.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FPAPManager.FlightListData}
 */
proto.FPAPManager.FlightListData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FPAPManager.FlightListData;
  return proto.FPAPManager.FlightListData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FPAPManager.FlightListData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FPAPManager.FlightListData}
 */
proto.FPAPManager.FlightListData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.FPAPManager.Flight;
      reader.readMessage(value,proto.FPAPManager.Flight.deserializeBinaryFromReader);
      msg.addFlights(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FPAPManager.FlightListData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FPAPManager.FlightListData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FPAPManager.FlightListData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.FlightListData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.FPAPManager.Flight.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Flight Flights = 1;
 * @return {!Array<!proto.FPAPManager.Flight>}
 */
proto.FPAPManager.FlightListData.prototype.getFlightsList = function() {
  return /** @type{!Array<!proto.FPAPManager.Flight>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FPAPManager.Flight, 1));
};


/**
 * @param {!Array<!proto.FPAPManager.Flight>} value
 * @return {!proto.FPAPManager.FlightListData} returns this
*/
proto.FPAPManager.FlightListData.prototype.setFlightsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.FPAPManager.Flight=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FPAPManager.Flight}
 */
proto.FPAPManager.FlightListData.prototype.addFlights = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.FPAPManager.Flight, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FPAPManager.FlightListData} returns this
 */
proto.FPAPManager.FlightListData.prototype.clearFlightsList = function() {
  return this.setFlightsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FPAPManager.Flight.prototype.toObject = function(opt_includeInstance) {
  return proto.FPAPManager.Flight.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FPAPManager.Flight} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.Flight.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flightidentifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    flightnumber: jspb.Message.getFieldWithDefault(msg, 3, ""),
    airline: jspb.Message.getFieldWithDefault(msg, 4, ""),
    airlineoperator: jspb.Message.getFieldWithDefault(msg, 5, ""),
    flightorigindate: (f = msg.getFlightorigindate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    aircraft: (f = msg.getAircraft()) && proto.FPAPManager.Aircraft.toObject(includeInstance, f),
    departureairporticao: jspb.Message.getFieldWithDefault(msg, 8, ""),
    destinationairporticao: jspb.Message.getFieldWithDefault(msg, 9, ""),
    utcscheduledtimedeparture: (f = msg.getUtcscheduledtimedeparture()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    utcscheduledtimeofarrival: (f = msg.getUtcscheduledtimeofarrival()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    etops: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    decompressioncheck: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    flightplanid: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FPAPManager.Flight}
 */
proto.FPAPManager.Flight.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FPAPManager.Flight;
  return proto.FPAPManager.Flight.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FPAPManager.Flight} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FPAPManager.Flight}
 */
proto.FPAPManager.Flight.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightidentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightnumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAirline(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAirlineoperator(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFlightorigindate(value);
      break;
    case 7:
      var value = new proto.FPAPManager.Aircraft;
      reader.readMessage(value,proto.FPAPManager.Aircraft.deserializeBinaryFromReader);
      msg.setAircraft(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartureairporticao(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationairporticao(value);
      break;
    case 10:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUtcscheduledtimedeparture(value);
      break;
    case 11:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUtcscheduledtimeofarrival(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEtops(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDecompressioncheck(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightplanid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FPAPManager.Flight.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FPAPManager.Flight.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FPAPManager.Flight} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.Flight.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlightidentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFlightnumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAirline();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAirlineoperator();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFlightorigindate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAircraft();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.FPAPManager.Aircraft.serializeBinaryToWriter
    );
  }
  f = message.getDepartureairporticao();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDestinationairporticao();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUtcscheduledtimedeparture();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getUtcscheduledtimeofarrival();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEtops();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getDecompressioncheck();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getFlightplanid();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.FPAPManager.Flight.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string FlightIdentifier = 2;
 * @return {string}
 */
proto.FPAPManager.Flight.prototype.getFlightidentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setFlightidentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FlightNumber = 3;
 * @return {string}
 */
proto.FPAPManager.Flight.prototype.getFlightnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setFlightnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Airline = 4;
 * @return {string}
 */
proto.FPAPManager.Flight.prototype.getAirline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setAirline = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string AirlineOperator = 5;
 * @return {string}
 */
proto.FPAPManager.Flight.prototype.getAirlineoperator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setAirlineoperator = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp FlightOriginDate = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.FPAPManager.Flight.prototype.getFlightorigindate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.FPAPManager.Flight} returns this
*/
proto.FPAPManager.Flight.prototype.setFlightorigindate = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.clearFlightorigindate = function() {
  return this.setFlightorigindate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FPAPManager.Flight.prototype.hasFlightorigindate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Aircraft Aircraft = 7;
 * @return {?proto.FPAPManager.Aircraft}
 */
proto.FPAPManager.Flight.prototype.getAircraft = function() {
  return /** @type{?proto.FPAPManager.Aircraft} */ (
    jspb.Message.getWrapperField(this, proto.FPAPManager.Aircraft, 7));
};


/**
 * @param {?proto.FPAPManager.Aircraft|undefined} value
 * @return {!proto.FPAPManager.Flight} returns this
*/
proto.FPAPManager.Flight.prototype.setAircraft = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.clearAircraft = function() {
  return this.setAircraft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FPAPManager.Flight.prototype.hasAircraft = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string DepartureAirportIcao = 8;
 * @return {string}
 */
proto.FPAPManager.Flight.prototype.getDepartureairporticao = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setDepartureairporticao = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string DestinationAirportIcao = 9;
 * @return {string}
 */
proto.FPAPManager.Flight.prototype.getDestinationairporticao = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setDestinationairporticao = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional google.protobuf.Timestamp UtcScheduledTimeDeparture = 10;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.FPAPManager.Flight.prototype.getUtcscheduledtimedeparture = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 10));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.FPAPManager.Flight} returns this
*/
proto.FPAPManager.Flight.prototype.setUtcscheduledtimedeparture = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.clearUtcscheduledtimedeparture = function() {
  return this.setUtcscheduledtimedeparture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FPAPManager.Flight.prototype.hasUtcscheduledtimedeparture = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional google.protobuf.Timestamp UtcScheduledTimeOfArrival = 11;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.FPAPManager.Flight.prototype.getUtcscheduledtimeofarrival = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 11));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.FPAPManager.Flight} returns this
*/
proto.FPAPManager.Flight.prototype.setUtcscheduledtimeofarrival = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.clearUtcscheduledtimeofarrival = function() {
  return this.setUtcscheduledtimeofarrival(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FPAPManager.Flight.prototype.hasUtcscheduledtimeofarrival = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool Etops = 12;
 * @return {boolean}
 */
proto.FPAPManager.Flight.prototype.getEtops = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setEtops = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool DecompressionCheck = 13;
 * @return {boolean}
 */
proto.FPAPManager.Flight.prototype.getDecompressioncheck = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setDecompressioncheck = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional string FlightPlanId = 14;
 * @return {string}
 */
proto.FPAPManager.Flight.prototype.getFlightplanid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Flight} returns this
 */
proto.FPAPManager.Flight.prototype.setFlightplanid = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FPAPManager.Aircraft.prototype.toObject = function(opt_includeInstance) {
  return proto.FPAPManager.Aircraft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FPAPManager.Aircraft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.Aircraft.toObject = function(includeInstance, msg) {
  var f, obj = {
    aircrafttype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    registration: jspb.Message.getFieldWithDefault(msg, 2, ""),
    equipment: (f = msg.getEquipment()) && proto.FPAPManager.Equipment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FPAPManager.Aircraft}
 */
proto.FPAPManager.Aircraft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FPAPManager.Aircraft;
  return proto.FPAPManager.Aircraft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FPAPManager.Aircraft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FPAPManager.Aircraft}
 */
proto.FPAPManager.Aircraft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAircrafttype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegistration(value);
      break;
    case 3:
      var value = new proto.FPAPManager.Equipment;
      reader.readMessage(value,proto.FPAPManager.Equipment.deserializeBinaryFromReader);
      msg.setEquipment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FPAPManager.Aircraft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FPAPManager.Aircraft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FPAPManager.Aircraft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.Aircraft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAircrafttype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegistration();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEquipment();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.FPAPManager.Equipment.serializeBinaryToWriter
    );
  }
};


/**
 * optional string AircraftType = 1;
 * @return {string}
 */
proto.FPAPManager.Aircraft.prototype.getAircrafttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Aircraft} returns this
 */
proto.FPAPManager.Aircraft.prototype.setAircrafttype = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Registration = 2;
 * @return {string}
 */
proto.FPAPManager.Aircraft.prototype.getRegistration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.FPAPManager.Aircraft} returns this
 */
proto.FPAPManager.Aircraft.prototype.setRegistration = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Equipment Equipment = 3;
 * @return {?proto.FPAPManager.Equipment}
 */
proto.FPAPManager.Aircraft.prototype.getEquipment = function() {
  return /** @type{?proto.FPAPManager.Equipment} */ (
    jspb.Message.getWrapperField(this, proto.FPAPManager.Equipment, 3));
};


/**
 * @param {?proto.FPAPManager.Equipment|undefined} value
 * @return {!proto.FPAPManager.Aircraft} returns this
*/
proto.FPAPManager.Aircraft.prototype.setEquipment = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.FPAPManager.Aircraft} returns this
 */
proto.FPAPManager.Aircraft.prototype.clearEquipment = function() {
  return this.setEquipment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.FPAPManager.Aircraft.prototype.hasEquipment = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FPAPManager.Equipment.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FPAPManager.Equipment.prototype.toObject = function(opt_includeInstance) {
  return proto.FPAPManager.Equipment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FPAPManager.Equipment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.Equipment.toObject = function(includeInstance, msg) {
  var f, obj = {
    item10aList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    item18List: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FPAPManager.Equipment}
 */
proto.FPAPManager.Equipment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FPAPManager.Equipment;
  return proto.FPAPManager.Equipment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FPAPManager.Equipment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FPAPManager.Equipment}
 */
proto.FPAPManager.Equipment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addItem10a(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addItem18(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FPAPManager.Equipment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FPAPManager.Equipment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FPAPManager.Equipment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FPAPManager.Equipment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem10aList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getItem18List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string Item10a = 1;
 * @return {!Array<string>}
 */
proto.FPAPManager.Equipment.prototype.getItem10aList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.FPAPManager.Equipment} returns this
 */
proto.FPAPManager.Equipment.prototype.setItem10aList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.FPAPManager.Equipment} returns this
 */
proto.FPAPManager.Equipment.prototype.addItem10a = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FPAPManager.Equipment} returns this
 */
proto.FPAPManager.Equipment.prototype.clearItem10aList = function() {
  return this.setItem10aList([]);
};


/**
 * repeated string Item18 = 2;
 * @return {!Array<string>}
 */
proto.FPAPManager.Equipment.prototype.getItem18List = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.FPAPManager.Equipment} returns this
 */
proto.FPAPManager.Equipment.prototype.setItem18List = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.FPAPManager.Equipment} returns this
 */
proto.FPAPManager.Equipment.prototype.addItem18 = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.FPAPManager.Equipment} returns this
 */
proto.FPAPManager.Equipment.prototype.clearItem18List = function() {
  return this.setItem18List([]);
};


goog.object.extend(exports, proto.FPAPManager);
